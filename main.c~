#include <stdint.h>
#include <string.h>
#include "nordic_common.h"
#include "nrf.h"
#include "ble_hci.h"
#include "ble_advdata.h"
#include "ble_advertising.h"
#include "ble_conn_params.h"
#include "nrf_sdh.h"
#include "nrf_sdh_soc.h"
#include "nrf_sdh_ble.h"
#include "nrf_ble_gatt.h"
#include "nrf_ble_qwr.h"
#include "app_timer.h"
#include "ble_nus.h"
#include "app_uart.h"
#include "app_util_platform.h"
#include "bsp_btn_ble.h"
#include "nrf_delay.h"
#include "nrfx_uart.h"
#include "nrf_drv_spi.h"
#include "nrf_drv_twi.h"
#include "nrf_gpio.h"
#define UART_HWFC APP_UART_FLOW_CONTROL_DISABLED
#include "nrf_pwr_mgmt.h"
#include "nrf_uart.h"
#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"

#define APP_BLE_CONN_CFG_TAG            1
#define DEVICE_NAME                     "GGW_TEST"
#define NUS_SERVICE_UUID_TYPE           BLE_UUID_TYPE_VENDOR_BEGIN
#define APP_BLE_OBSERVER_PRIO           3
#define APP_ADV_INTERVAL                64
#define APP_ADV_DURATION                18000
#define MIN_CONN_INTERVAL               MSEC_TO_UNITS(20, UNIT_1_25_MS)
#define MAX_CONN_INTERVAL               MSEC_TO_UNITS(75, UNIT_1_25_MS)
#define SLAVE_LATENCY                   0
#define CONN_SUP_TIMEOUT                MSEC_TO_UNITS(4000, UNIT_10_MS)
#define FIRST_CONN_PARAMS_UPDATE_DELAY  APP_TIMER_TICKS(5000)                       /**< Time from initiating event (connect or start of notification) to first time sd_ble_gap_conn_param_update is called (5 seconds). */
#define NEXT_CONN_PARAMS_UPDATE_DELAY   APP_TIMER_TICKS(30000)                      /**< Time between each call to sd_ble_gap_conn_param_update after the first call (30 seconds). */
#define MAX_CONN_PARAMS_UPDATE_COUNT    3                                           /**< Number of attempts before giving up the connection parameter negotiation. */

#define DEAD_BEEF                       0xDEADBEEF
#define UART_TX_BUF_SIZE                256
#define UART_RX_BUF_SIZE                256

BLE_NUS_DEF(m_nus, NRF_SDH_BLE_TOTAL_LINK_COUNT);
NRF_BLE_GATT_DEF(m_gatt);
NRF_BLE_QWR_DEF(m_qwr);
BLE_ADVERTISING_DEF(m_advertising);
static uint16_t   m_conn_handle          = BLE_CONN_HANDLE_INVALID;
static uint16_t   m_ble_nus_max_data_len = BLE_GATT_ATT_MTU_DEFAULT - 3;
static ble_uuid_t m_adv_uuids[]          = {{BLE_UUID_NUS_SERVICE, NUS_SERVICE_UUID_TYPE}};

static const nrf_drv_spi_t spi = NRF_DRV_SPI_INSTANCE(0);

//static uint8_t tx[17] = {0x55,0x55, 0x55,0x55,0x55,0x55,0x55, 10,10,0,0,0, 0,0,0,0,0};
//static uint8_t rx[17] = {0x44};
static const nrf_drv_twi_t twi = NRF_DRV_TWI_INSTANCE(0);
static const nrfx_uart_t uart = NRFX_UART_INSTANCE(0);
const uint8_t MAX30102_ADDR = 0xAE>>1;

void TI_setup() {
  uint8_t A[3] = {0,6};//reset
  uint8_t rx[3];
  nrf_drv_spi_transfer(&spi,A,2,rx,2);
  nrf_delay_ms(1);
  
  A[0]=1;//SDATAC
  A[1]=6;
  nrf_drv_spi_transfer(&spi,A,2,rx,2);
nrf_delay_ms(200);
  A[0]=0x43;//set 10SPS
  A[1]=0x00;
  A[2]=0x02;
  nrf_drv_spi_transfer(&spi,A,3,rx,3);

  return;
  //rreg 20 + addr 00+numbytes+1 9 total regs
  //wreg 4....
  //uint8_t tx[13] = {0x20,0x0A};
  //uint8_t rx[13];
  //for(int i = 0; i < 13; i++) {
  //  if(i>1) tx[i]=0;
  //  rx[i]=0;
  //}
  //nrf_drv_spi_transfer(&spi,tx,13,rx,13);
  //nrfx_uart_tx(&uart,rx,13);//by default reads 5SPS
  //return;
}

void TI_read() {
  //RDATA 0x01 0x02
  uint8_t tx[5] = {0x01,0x02,0,0,0};
  uint8_t rx[5] = {0,0,0,0,0};
  nrf_drv_spi_transfer(&spi,tx,5,rx,5);
  nrfx_uart_tx(&uart,rx,5);
  return;  
}

void check_twi(ret_code_t A){
  uint8_t dat[1] = {0};
  switch (A) {
  case NRF_SUCCESS:
    dat[0]=0;
    nrfx_uart_tx(&uart,dat,1);
    return;
  case NRF_ERROR_DRV_TWI_ERR_ANACK:
    dat[0]=1;
    nrfx_uart_tx(&uart,dat,1);
    return;
  case NRF_ERROR_DRV_TWI_ERR_DNACK:
    dat[0]=2;
    nrfx_uart_tx(&uart,dat,1);
    return;
  case NRF_ERROR_BUSY:
    dat[0]=3;
    nrfx_uart_tx(&uart,dat,1);
    return;
  case NRF_ERROR_INTERNAL:
    dat[0]=4;
    nrfx_uart_tx(&uart,dat,1);
    return;
  default:
    dat[0]=5;
    nrfx_uart_tx(&uart,dat,1);
    return;

  }
}
void MAX_setup() {
  const uint8_t A[2] = {0x09,0x40};
  const uint8_t B[3] = {0x09,0x03,0x63};
  const uint8_t C[3] = {0x0C,0x2F,0x2F};
  const uint8_t D[2] = {0x02,0xC0};
  const uint8_t E[4] = {0x04,0x00,0x00,0x00};
  //false is no_stop (for repeated starts)
  //each has ret code    
  check_twi(nrf_drv_twi_tx(&twi, MAX30102_ADDR, A, sizeof(A), false));
  check_twi(nrf_drv_twi_tx(&twi, MAX30102_ADDR, B, sizeof(B), false));
  check_twi(nrf_drv_twi_tx(&twi, MAX30102_ADDR, C, sizeof(C), false));
  check_twi(nrf_drv_twi_tx(&twi, MAX30102_ADDR, D, sizeof(D), false));
  check_twi(nrf_drv_twi_tx(&twi, MAX30102_ADDR, E, sizeof(E), false));
}
void MAX_read_SPO2(uint8_t data[6]) {
  uint8_t mem_addr[2] = {0xAE,0x07};
  nrf_drv_twi_xfer_desc_t xfer;
  xfer.type=NRF_DRV_TWI_XFER_TXRX;
  xfer.address = MAX30102_ADDR;
  xfer.primary_length = 2;
  xfer.secondary_length = 6;
  xfer.p_primary_buf = mem_addr;
  xfer.p_secondary_buf = data;
  switch(nrf_drv_twi_xfer(&twi, &xfer, 0)) {//not sure this is right?
  case NRF_DRV_TWI_EVT_DONE:
    break;
  case NRF_DRV_TWI_EVT_ADDRESS_NACK:
    break;
  case NRF_DRV_TWI_EVT_DATA_NACK:
    break;
  default:
    break;
  }
	data[0]&=3;
	data[3]&=3;
	return;
}



void assert_nrf_callback(uint16_t line_num, const uint8_t * p_file_name) {
    app_error_handler(DEAD_BEEF, line_num, p_file_name);
}

static void timers_init(void) {
    ret_code_t err_code = app_timer_init();
    APP_ERROR_CHECK(err_code);
}

static void gap_params_init(void) {
    uint32_t                err_code;
    ble_gap_conn_params_t   gap_conn_params;
    ble_gap_conn_sec_mode_t sec_mode;

    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);

    err_code = sd_ble_gap_device_name_set(&sec_mode,
                                          (const uint8_t *) DEVICE_NAME,
                                          strlen(DEVICE_NAME));
    APP_ERROR_CHECK(err_code);

    memset(&gap_conn_params, 0, sizeof(gap_conn_params));

    gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
    gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
    gap_conn_params.slave_latency     = SLAVE_LATENCY;
    gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;

    err_code = sd_ble_gap_ppcp_set(&gap_conn_params);
    APP_ERROR_CHECK(err_code);
}

//@brief Function for handling Queued Write Module errors.
static void nrf_qwr_error_handler(uint32_t nrf_error)
{
    APP_ERROR_HANDLER(nrf_error);
}

static void nus_data_handler(ble_nus_evt_t * p_evt)
{
    if (p_evt->type == BLE_NUS_EVT_RX_DATA)
    {
      uint8_t abc[9]="received";
      uint16_t len = 9;
       ble_nus_data_send(&m_nus,(uint8_t*)p_evt->params.rx_data.p_data,&(p_evt->params.rx_data.length),m_conn_handle);
      ble_nus_data_send(&m_nus,abc,&len,m_conn_handle);
    }
}


/**@brief Function for initializing services that will be used by the application.
 */
static void services_init(void)
{
    uint32_t           err_code;
    ble_nus_init_t     nus_init;
    nrf_ble_qwr_init_t qwr_init = {0};

    // Initialize Queued Write Module.
    qwr_init.error_handler = nrf_qwr_error_handler;

    err_code = nrf_ble_qwr_init(&m_qwr, &qwr_init);
    APP_ERROR_CHECK(err_code);

    memset(&nus_init, 0, sizeof(nus_init));

    nus_init.data_handler = nus_data_handler;

    err_code = ble_nus_init(&m_nus, &nus_init);
    APP_ERROR_CHECK(err_code);
}


static void on_conn_params_evt(ble_conn_params_evt_t * p_evt) {
    uint32_t err_code;

    if (p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED)
    {
        err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
        APP_ERROR_CHECK(err_code);
    }
}


/**@brief Function for handling errors from the Connection Parameters module.
 *
 * @param[in] nrf_error  Error code containing information about what went wrong.
 */
static void conn_params_error_handler(uint32_t nrf_error)
{
    APP_ERROR_HANDLER(nrf_error);
}

static void conn_params_init(void)
{
    uint32_t               err_code;
    ble_conn_params_init_t cp_init;

    memset(&cp_init, 0, sizeof(cp_init));

    cp_init.p_conn_params                  = NULL;
    cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
    cp_init.next_conn_params_update_delay  = NEXT_CONN_PARAMS_UPDATE_DELAY;
    cp_init.max_conn_params_update_count   = MAX_CONN_PARAMS_UPDATE_COUNT;
    cp_init.start_on_notify_cccd_handle    = BLE_GATT_HANDLE_INVALID;
    cp_init.disconnect_on_fail             = false;
    cp_init.evt_handler                    = on_conn_params_evt;
    cp_init.error_handler                  = conn_params_error_handler;

    err_code = ble_conn_params_init(&cp_init);
    APP_ERROR_CHECK(err_code);
}

static void on_adv_evt(ble_adv_evt_t ble_adv_evt) {
    switch (ble_adv_evt)
    {
        case BLE_ADV_EVT_FAST:
            break;
        case BLE_ADV_EVT_IDLE:
          break;
        default:
            break;
    }
}

static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context)
{
    uint32_t err_code;

    switch (p_ble_evt->header.evt_id)
    {
        case BLE_GAP_EVT_CONNECTED:
          //NRF_LOG_INFO("Connected");
            err_code = bsp_indication_set(BSP_INDICATE_CONNECTED);
            APP_ERROR_CHECK(err_code);
            m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
            err_code = nrf_ble_qwr_conn_handle_assign(&m_qwr, m_conn_handle);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GAP_EVT_DISCONNECTED:
          //NRF_LOG_INFO("Disconnected");
            // LED indication will be changed when advertising starts.
            m_conn_handle = BLE_CONN_HANDLE_INVALID;
            break;

        case BLE_GAP_EVT_PHY_UPDATE_REQUEST:
        {
          //NRF_LOG_DEBUG("PHY update request.");
            ble_gap_phys_t const phys =
            {
                .rx_phys = BLE_GAP_PHY_AUTO,
                .tx_phys = BLE_GAP_PHY_AUTO,
            };
            err_code = sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys);
            APP_ERROR_CHECK(err_code);
        } break;

        case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
            // Pairing not supported
            err_code = sd_ble_gap_sec_params_reply(m_conn_handle, BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP, NULL, NULL);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTS_EVT_SYS_ATTR_MISSING:
            // No system attributes have been stored.
            err_code = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0, 0);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTC_EVT_TIMEOUT:
            // Disconnect on GATT Client timeout event.
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTS_EVT_TIMEOUT:
            // Disconnect on GATT Server timeout event.
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;

        default:
            // No implementation needed.
            break;
    }
}

static void ble_stack_init(void)
{
    ret_code_t err_code;

    err_code = nrf_sdh_enable_request();
    APP_ERROR_CHECK(err_code);

    // Configure the BLE stack using the default settings.
    // Fetch the start address of the application RAM.
    uint32_t ram_start = 0;
    err_code = nrf_sdh_ble_default_cfg_set(APP_BLE_CONN_CFG_TAG, &ram_start);
    APP_ERROR_CHECK(err_code);

    // Enable BLE stack.
    err_code = nrf_sdh_ble_enable(&ram_start);
    APP_ERROR_CHECK(err_code);

    // Register a handler for BLE events.
    NRF_SDH_BLE_OBSERVER(m_ble_observer, APP_BLE_OBSERVER_PRIO, ble_evt_handler, NULL);
}


/**@brief Function for handling events from the GATT library. */
void gatt_evt_handler(nrf_ble_gatt_t * p_gatt, nrf_ble_gatt_evt_t const * p_evt)
{
    if ((m_conn_handle == p_evt->conn_handle) && (p_evt->evt_id == NRF_BLE_GATT_EVT_ATT_MTU_UPDATED))
    {
        m_ble_nus_max_data_len = p_evt->params.att_mtu_effective - OPCODE_LENGTH - HANDLE_LENGTH;
    }
}


/**@brief Function for initializing the GATT library. */
void gatt_init(void)
{
    ret_code_t err_code;

    err_code = nrf_ble_gatt_init(&m_gatt, gatt_evt_handler);
    APP_ERROR_CHECK(err_code);

    err_code = nrf_ble_gatt_att_mtu_periph_set(&m_gatt, NRF_SDH_BLE_GATT_MAX_MTU_SIZE);
    APP_ERROR_CHECK(err_code);
}

static void advertising_init(void)
{
    uint32_t               err_code;
    ble_advertising_init_t init;

    memset(&init, 0, sizeof(init));

    init.advdata.name_type          = BLE_ADVDATA_FULL_NAME;
    init.advdata.include_appearance = false;
    init.advdata.flags              = BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE;

    init.srdata.uuids_complete.uuid_cnt = sizeof(m_adv_uuids) / sizeof(m_adv_uuids[0]);
    init.srdata.uuids_complete.p_uuids  = m_adv_uuids;

    init.config.ble_adv_fast_enabled  = true;
    init.config.ble_adv_fast_interval = APP_ADV_INTERVAL;
    init.config.ble_adv_fast_timeout  = APP_ADV_DURATION;
    init.evt_handler = on_adv_evt;

    err_code = ble_advertising_init(&m_advertising, &init);
    APP_ERROR_CHECK(err_code);

    ble_advertising_conn_cfg_tag_set(&m_advertising, APP_BLE_CONN_CFG_TAG);
}

static void advertising_start(void)
{
    uint32_t err_code = ble_advertising_start(&m_advertising, BLE_ADV_MODE_FAST);
    APP_ERROR_CHECK(err_code);
}



int main(void)
{
  timers_init();
  ble_stack_init();
  gap_params_init();
  gatt_init();
  services_init();
  advertising_init();
  conn_params_init();
  
  advertising_start();
  
  nrf_drv_twi_config_t twi_conf;
  twi_conf.scl=02;
  twi_conf.sda=31;//for some reason 30 doesn't work
  twi_conf.frequency=NRF_TWI_FREQ_400K;
  nrf_drv_twi_init(&twi,&twi_conf,NULL,NULL);
  nrf_drv_twi_enable(&twi);
  //nrf_drv_twi_tx(&twi, MAX30102_ADDR, tx_data, sizeof(tx_data),false);
  //uint8_t data[6];
  //MAX_read_SPO2(data);
  //MAX_get_avail_samps();

  //DRDY is 7, START is 9
  //nrf_gpio_cfg_output(9); start
  nrf_gpio_cfg_input(7,NRF_GPIO_PIN_NOPULL);
  
  nrf_drv_spi_config_t spi_config = NRF_DRV_SPI_DEFAULT_CONFIG;
  spi_config.ss_pin   = 8;
  spi_config.miso_pin = 6;
  spi_config.mosi_pin = 5;
  spi_config.sck_pin  = 4;
  spi_config.frequency = NRF_DRV_SPI_FREQ_1M;
  spi_config.mode = NRF_DRV_SPI_MODE_1;
  spi_config.bit_order = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST;

  //need to do start pin first
  
  nrfx_uart_config_t uart_conf;
  uart_conf.pseltxd=18;//maybe set others
  uart_conf.pselrxd=NRF_UART_PSEL_DISCONNECTED;
  uart_conf.pselcts=NRF_UART_PSEL_DISCONNECTED;
  uart_conf.pselrts=NRF_UART_PSEL_DISCONNECTED;
  uart_conf.hwfc = NRF_UART_HWFC_DISABLED;
  uart_conf.p_context=NULL;
  uart_conf.interrupt_priority=NRFX_UART_DEFAULT_CONFIG_IRQ_PRIORITY;
  uart_conf.parity =NRF_UART_PARITY_EXCLUDED;
  uart_conf.baudrate=NRF_UART_BAUDRATE_115200;
  nrfx_uart_init(&uart, &uart_conf,NULL);

  nrf_drv_spi_init(&spi,&spi_config,NULL,NULL);
  
  int counter = 0;

  TI_setup();
  while(true) {

    //(pin_set), (pin_clear, pin_toggle)
    if(!nrf_gpio_pin_read(7)) {      
      TI_read();
    }

    //nrfx_uart_tx(&uart,dat,8);
    //MAX_setup();
    counter++;
    nrf_delay_ms(4);
    ble_nus_data_send(&m_nus,abc,&len,m_conn_handle); 
    }
}
